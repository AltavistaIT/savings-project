/* tslint:disable */
/* eslint-disable */
/**
 * sp_internal_api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTableModel,
  ErrorResponse,
  TablesIdGet200Response,
  TablesPost200Response,
} from '../models/index';
import {
    CreateTableModelFromJSON,
    CreateTableModelToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    TablesIdGet200ResponseFromJSON,
    TablesIdGet200ResponseToJSON,
    TablesPost200ResponseFromJSON,
    TablesPost200ResponseToJSON,
} from '../models/index';

export interface TablesIdGetRequest {
    id: number;
}

export interface TablesPostRequest {
    createTableModel: CreateTableModel;
}

/**
 * 
 */
export class TablesApi extends runtime.BaseAPI {

    /**
     * Get table by id
     */
    async tablesIdGetRaw(requestParameters: TablesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TablesIdGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tablesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TablesIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get table by id
     */
    async tablesIdGet(requestParameters: TablesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TablesIdGet200Response> {
        const response = await this.tablesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new table
     */
    async tablesPostRaw(requestParameters: TablesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TablesPost200Response>> {
        if (requestParameters['createTableModel'] == null) {
            throw new runtime.RequiredError(
                'createTableModel',
                'Required parameter "createTableModel" was null or undefined when calling tablesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tables`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTableModelToJSON(requestParameters['createTableModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TablesPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new table
     */
    async tablesPost(requestParameters: TablesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TablesPost200Response> {
        const response = await this.tablesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
